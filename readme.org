#+title: readme
#+property: header-args:nim+ :flags -d:plainStdout --cc:tcc --hints:off
#+property: header-args:nim+ :import hdrawing

Helper for pretty-printing things in terminal. Draw grids, boxes,
easily concatenate string blocks. Correctly handles unicode and ANSI
escape codes. Supports multicell grids.

* Installation

#+begin_src bash
nimble install hdrawing
#+end_src

* Links

- [[https://github.com/haxscramper/hdrawing][github]]
- [[https://discord.gg/hjfYJCU][discord server]]
- [[https://haxscramper.github.io/hdrawing-doc/src/hdrawing.html][documentation]]
- [[https://nimble.directory/pkg/hdrawing][nimble package]]

* Primitives

#+begin_src nim :exports both
withBufEcho:
  newTermText((1, 1), @["* 222", "    )))"]).render(buf)
#+end_src

#+RESULTS:
:
:  * 222
:      )))

#+begin_src nim :exports both
withBufEcho:
  newBoxedTermText(
    (1, 1), @["Text inside", "of ascii box"],
    makeAsciiRectBorder()
  ).render(buf)
#+end_src

#+RESULTS:
:
:  +------------+
:  |Text inside |
:  |of ascii box|
:  +------------+

* Contribution & development (planned/TODO)

The code is mostly just ten layers of ~if/else~ and ~for~ loops nested
in each other, but if you have any questions about implementation can
as them on my [[https://discord.gg/ZnBB4E][discord server]]. New features I might add later. Things I
plan to add:


Annotations for expressions/parse trees
#+begin_src text
  2 + 3   *    4
  | | |   |    |
  | | +-Factor-+
  | |     |
  +-Expr -+
#+end_src

Parse tree - token mapping
#+begin_src text
                      +-----------------------+
+---------------------+Sum -> Sum [+-] Product+-------------------+
|                     +-----------------------+                   |
|+--------------+ +----+           +-----------------+            |
++Sum -> Product++|[+-]|+----------+Product -> Factor+------------+
|+--------------+|+----+|          +-----------------+            |
|                |      |                                         |
0                1      2     3     4      5    6     7     8     9
+----------------+------+-----+-----+-----+-----+-----+-----+-----+
|       1        |  +   |  (  |  2  |  *  |  3  |  -  |  4  |  )  |
+----------------+------+-----+-----+-----+-----+-----+-----+-----+
#+end_src

Parse tree standalone
#+begin_src text
         +-------+
         | Block |
         +---+---+
           +-+--+
           | If |
           ++++++
   +--------+||+------------------+
   |         |+-------+           |
+--+---+ +---+---+ +--+-----+ +---+---+
| "if" | | Block | | "else" | | Block |
+------+ +---+---+ +--------+ +---+---+
           +-+--+             +---+--+
           | If |             | "{}" |
           +-++-+             +------+
        +----++----+
     +--+---+  +---+---+
     | "if" |  | Block |
     +------+  +---+---+
               +---+--+
               | "{}" |
               +------+
#+end_src

Embed nested grids into each other

#+begin_src text
  +-------------------+---+---------+----+-----+
  |World              |222|(((---)))|***)|***  |
  |reallyu long string+---+---------+----+-----+
  |                   |222|((()))   |*** |***  |
  |                   +---+---------+----+-----+
  |Hello              | Some annotation        |
  +------+------------+-------------+----------+
  |222   |(((---)))   |***          |***       |
  |      |            |((()))       |          |
  +------+------------+-------------+----------+
  |222   |((()))      |***          |***       |
  +------+------------+-------------+----------+

#+end_src

* More Random examples

#+begin_src nim :exports both
  import strformat
  import hdrawing

  var buf = newBuf()
  newTermText((0,0), @["* (0, 0)".toRunes()]).render(buf)
  newTermText((8, 5), @["* (5, 5)"]).render(buf)
  newTermPoint((39, 19)).render(buf)
  newBoxedTermText(
    (0, 0), @["Hello world", "Some text", "to render"]
  ).render(buf)
  newTermPoint((0, 0), '@').render(buf)

  let w = 10
  newTermRect((8, 6), w, 5, makeAsciiRectBorder()).render(buf)

  for p in 6 .. 11:
    newTermText((8 + w, p), @[&"* ({8 + w}, {p})"]).render(buf)

  newTermText((8, 11), @["12345"]).render(buf)

  newBoxedTermText(
    (15, 15), @["Text inside", "of unicode box"],
    makeAsciiRectBorder()
  ).render(buf)
  echo buf.toString()
#+end_src

#+RESULTS:
#+begin_example
@#############
#Hello world #
#Some text   #
#to render   #
##############
        ,* (5, 5)
        +--------+* (18, 6)
        |        |* (18, 7)
        |        |* (18, 8)
        |        |* (18, 9)
        +--------+* (18, 10)
        12345     * (18, 11)



               +--------------+
               |Text inside   |
               |of unicode box|
               +--------------+
                                       +
#+end_example



#+begin_src nim :exports both
  import strutils, sequtils, strformat, options
  import ../src/hdrawing
  import hmisc/types/[seq2d, colorstring]

  proc ms(a, b: int): auto = makeArrSize(a, b)
  let nn = none((ArrSize, TermBuf))
  proc sb(s: string): TermBuf = s.toTermBuf()
  echo newTermMultiGrid(
    (0, 0),
    @[
      @[
        some((ms(2, 3), sb("Hello\nWorld\nreallyu long str\ning"))),
        nn,
        some((ms(2, 3), sb(newTermMultiGrid(
          (0, 0),
          @[
            @[
              some((ms(1, 1), sb("222"))),
              some((ms(1, 1), sb("(((---)))"))),
              some((ms(1, 1), sb("***)"))),
              some((ms(1, 1), sb("***")))
            ],
            @[
              some((ms(1, 1), sb("222"))),
              some((ms(1, 1), sb("((()))"))),
              some((ms(1, 1), sb("***"))),
              some((ms(1, 1), sb("***")))
            ],
          ],
          makeAsciiGridBorders(),
        ).toTermBuf().toString() & "\nSome annotation"))),
        nn
      ],
      @[nn, nn, nn, nn],
      @[nn, nn, nn, nn
      ],
      @[
        some((ms(1, 1), sb("222"))),
        some((ms(1, 1), sb("(((---)))"))),
        some((ms(1, 1), sb("***\n((()))"))),
        some((ms(1, 1), sb("***")))
      ],
      @[
        some((ms(1, 1), sb("222"))),
        some((ms(1, 1), sb("((()))"))),
        some((ms(1, 1), sb("***"))),
        some((ms(1, 1), sb("***")))
      ],
    ],
    makeAsciiGridBorders(),
  ).toTermBuf().toString()

#+end_src

#+RESULTS:
#+begin_example
+----------------+------------------------+
|Hello           |+---+---------+----+---+|
|World           ||222|(((---)))|***)|***||
|reallyu long str|+---+---------+----+---+|
|ing             ||222|((()))   |*** |***||
|                |+---+---------+----+---+|
|                |Some annotation         |
+----+-----------+-------------+----------+
|222 |(((---)))  |***          |***       |
|    |           |((()))       |          |
+----+-----------+-------------+----------+
|222 |((()))     |***          |***       |
+----+-----------+-------------+----------+
#+end_example
